/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.dsl.rythmml.serializer;

import com.google.inject.Inject;
import fr.unice.polytech.dsl.rythmml.model.rythmml.Bar;
import fr.unice.polytech.dsl.rythmml.model.rythmml.Beat;
import fr.unice.polytech.dsl.rythmml.model.rythmml.Music;
import fr.unice.polytech.dsl.rythmml.model.rythmml.Note;
import fr.unice.polytech.dsl.rythmml.model.rythmml.Pattern;
import fr.unice.polytech.dsl.rythmml.model.rythmml.RythmmlPackage;
import fr.unice.polytech.dsl.rythmml.model.rythmml.Section;
import fr.unice.polytech.dsl.rythmml.services.RymlGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class RymlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RymlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RythmmlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RythmmlPackage.BAR:
				sequence_Bar(context, (Bar) semanticObject); 
				return; 
			case RythmmlPackage.BEAT:
				sequence_Beat(context, (Beat) semanticObject); 
				return; 
			case RythmmlPackage.MUSIC:
				sequence_Music(context, (Music) semanticObject); 
				return; 
			case RythmmlPackage.NOTE:
				sequence_Note(context, (Note) semanticObject); 
				return; 
			case RythmmlPackage.PATTERN:
				sequence_Pattern(context, (Pattern) semanticObject); 
				return; 
			case RythmmlPackage.SECTION:
				sequence_Section(context, (Section) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Bar returns Bar
	 *
	 * Constraint:
	 *     (name=EString beats+=[Beat|EString] beats+=[Beat|EString]*)
	 */
	protected void sequence_Bar(ISerializationContext context, Bar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Beat returns Beat
	 *
	 * Constraint:
	 *     (name=EString totalDivNumber=EInt? notes+=[Note|EString] notePositions+=EInt (notes+=[Note|EString] notePositions+=EInt)*)
	 */
	protected void sequence_Beat(ISerializationContext context, Beat semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Music returns Music
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             name=EString 
	 *             title=EString? 
	 *             author=EString? 
	 *             bpm=EInt? 
	 *             resolutionPerSlide=EInt? 
	 *             (ownedNotes+=Note ownedNotes+=Note*)?
	 *         ) | 
	 *         (ownedBeats+=Beat ownedBeats+=Beat*) | 
	 *         (ownedBars+=Bar ownedBars+=Bar*) | 
	 *         ((ownedPatterns+=Pattern ownedPatterns+=Pattern*)? ownedSections+=Section ownedSections+=Section*)
	 *     )+
	 */
	protected void sequence_Music(ISerializationContext context, Music semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Note returns Note
	 *
	 * Constraint:
	 *     (name=EString value=DrumNoteValue?)
	 */
	protected void sequence_Note(ISerializationContext context, Note semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pattern returns Pattern
	 *
	 * Constraint:
	 *     (name=EString bars+=[Bar|EString] bars+=[Bar|EString]*)
	 */
	protected void sequence_Pattern(ISerializationContext context, Pattern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Section returns Section
	 *
	 * Constraint:
	 *     (name=EString patterns+=[Pattern|EString] patterns+=[Pattern|EString]*)
	 */
	protected void sequence_Section(ISerializationContext context, Section semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
