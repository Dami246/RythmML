/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.dsl.rythmml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RymlGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MusicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.rythmml.Ryml.Music");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cMusicKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cTitleKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cTitleAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cTitleEStringParserRuleCall_0_3_1_0 = (RuleCall)cTitleAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cAuthorKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cAuthorAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cAuthorEStringParserRuleCall_0_4_1_0 = (RuleCall)cAuthorAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cBpmKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cBpmAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cBpmEIntParserRuleCall_0_5_1_0 = (RuleCall)cBpmAssignment_0_5_1.eContents().get(0);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Keyword cResolutionPerBeatsKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cResolutionPerSlideAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cResolutionPerSlideEIntParserRuleCall_0_6_1_0 = (RuleCall)cResolutionPerSlideAssignment_0_6_1.eContents().get(0);
		private final Group cGroup_0_7 = (Group)cGroup_0.eContents().get(7);
		private final Assignment cOwnedNotesAssignment_0_7_0 = (Assignment)cGroup_0_7.eContents().get(0);
		private final RuleCall cOwnedNotesNoteParserRuleCall_0_7_0_0 = (RuleCall)cOwnedNotesAssignment_0_7_0.eContents().get(0);
		private final Assignment cOwnedNotesAssignment_0_7_1 = (Assignment)cGroup_0_7.eContents().get(1);
		private final RuleCall cOwnedNotesNoteParserRuleCall_0_7_1_0 = (RuleCall)cOwnedNotesAssignment_0_7_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Assignment cOwnedBeatsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOwnedBeatsBeatParserRuleCall_1_0_0 = (RuleCall)cOwnedBeatsAssignment_1_0.eContents().get(0);
		private final Assignment cOwnedBeatsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOwnedBeatsBeatParserRuleCall_1_1_0 = (RuleCall)cOwnedBeatsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Assignment cOwnedBarsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOwnedBarsBarParserRuleCall_2_0_0 = (RuleCall)cOwnedBarsAssignment_2_0.eContents().get(0);
		private final Assignment cOwnedBarsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedBarsBarParserRuleCall_2_1_0 = (RuleCall)cOwnedBarsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cOwnedPatternsAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cOwnedPatternsPatternParserRuleCall_3_0_0_0 = (RuleCall)cOwnedPatternsAssignment_3_0_0.eContents().get(0);
		private final Assignment cOwnedPatternsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cOwnedPatternsPatternParserRuleCall_3_0_1_0 = (RuleCall)cOwnedPatternsAssignment_3_0_1.eContents().get(0);
		private final Assignment cOwnedSectionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedSectionsSectionParserRuleCall_3_1_0 = (RuleCall)cOwnedSectionsAssignment_3_1.eContents().get(0);
		private final Assignment cOwnedSectionsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cOwnedSectionsSectionParserRuleCall_3_2_0 = (RuleCall)cOwnedSectionsAssignment_3_2.eContents().get(0);
		
		//Music:
		//	'Music'
		//	name=EString
		//	':' ('title :' title=EString)? ('author :' author=EString)? ('bpm :' bpm=EInt)? ('resolution per beats : '
		//	resolutionPerSlide=EInt)? (ownedNotes+=Note ownedNotes+=Note*)?
		//	& (ownedBeats+=Beat ownedBeats+=Beat*)?
		//	& (ownedBars+=Bar ownedBars+=Bar*)?
		//	& (ownedPatterns+=Pattern ownedPatterns+=Pattern*)?
		//	ownedSections+=Section ownedSections+=Section*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Music' name=EString ':' ('title :' title=EString)? ('author :' author=EString)? ('bpm :' bpm=EInt)?
		//('resolution per beats : ' resolutionPerSlide=EInt)? (ownedNotes+=Note ownedNotes+=Note*)? & (ownedBeats+=Beat
		//ownedBeats+=Beat*)? & (ownedBars+=Bar ownedBars+=Bar*)? & (ownedPatterns+=Pattern ownedPatterns+=Pattern*)?
		//ownedSections+=Section ownedSections+=Section*
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'Music' name=EString ':' ('title :' title=EString)? ('author :' author=EString)? ('bpm :' bpm=EInt)?
		//('resolution per beats : ' resolutionPerSlide=EInt)? (ownedNotes+=Note ownedNotes+=Note*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'Music'
		public Keyword getMusicKeyword_0_0() { return cMusicKeyword_0_0; }
		
		//name=EString
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_1_0() { return cNameEStringParserRuleCall_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//('title :' title=EString)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'title :'
		public Keyword getTitleKeyword_0_3_0() { return cTitleKeyword_0_3_0; }
		
		//title=EString
		public Assignment getTitleAssignment_0_3_1() { return cTitleAssignment_0_3_1; }
		
		//EString
		public RuleCall getTitleEStringParserRuleCall_0_3_1_0() { return cTitleEStringParserRuleCall_0_3_1_0; }
		
		//('author :' author=EString)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//'author :'
		public Keyword getAuthorKeyword_0_4_0() { return cAuthorKeyword_0_4_0; }
		
		//author=EString
		public Assignment getAuthorAssignment_0_4_1() { return cAuthorAssignment_0_4_1; }
		
		//EString
		public RuleCall getAuthorEStringParserRuleCall_0_4_1_0() { return cAuthorEStringParserRuleCall_0_4_1_0; }
		
		//('bpm :' bpm=EInt)?
		public Group getGroup_0_5() { return cGroup_0_5; }
		
		//'bpm :'
		public Keyword getBpmKeyword_0_5_0() { return cBpmKeyword_0_5_0; }
		
		//bpm=EInt
		public Assignment getBpmAssignment_0_5_1() { return cBpmAssignment_0_5_1; }
		
		//EInt
		public RuleCall getBpmEIntParserRuleCall_0_5_1_0() { return cBpmEIntParserRuleCall_0_5_1_0; }
		
		//('resolution per beats : ' resolutionPerSlide=EInt)?
		public Group getGroup_0_6() { return cGroup_0_6; }
		
		//'resolution per beats : '
		public Keyword getResolutionPerBeatsKeyword_0_6_0() { return cResolutionPerBeatsKeyword_0_6_0; }
		
		//resolutionPerSlide=EInt
		public Assignment getResolutionPerSlideAssignment_0_6_1() { return cResolutionPerSlideAssignment_0_6_1; }
		
		//EInt
		public RuleCall getResolutionPerSlideEIntParserRuleCall_0_6_1_0() { return cResolutionPerSlideEIntParserRuleCall_0_6_1_0; }
		
		//(ownedNotes+=Note ownedNotes+=Note*)?
		public Group getGroup_0_7() { return cGroup_0_7; }
		
		//ownedNotes+=Note
		public Assignment getOwnedNotesAssignment_0_7_0() { return cOwnedNotesAssignment_0_7_0; }
		
		//Note
		public RuleCall getOwnedNotesNoteParserRuleCall_0_7_0_0() { return cOwnedNotesNoteParserRuleCall_0_7_0_0; }
		
		//ownedNotes+=Note*
		public Assignment getOwnedNotesAssignment_0_7_1() { return cOwnedNotesAssignment_0_7_1; }
		
		//Note
		public RuleCall getOwnedNotesNoteParserRuleCall_0_7_1_0() { return cOwnedNotesNoteParserRuleCall_0_7_1_0; }
		
		//(ownedBeats+=Beat ownedBeats+=Beat*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ownedBeats+=Beat
		public Assignment getOwnedBeatsAssignment_1_0() { return cOwnedBeatsAssignment_1_0; }
		
		//Beat
		public RuleCall getOwnedBeatsBeatParserRuleCall_1_0_0() { return cOwnedBeatsBeatParserRuleCall_1_0_0; }
		
		//ownedBeats+=Beat*
		public Assignment getOwnedBeatsAssignment_1_1() { return cOwnedBeatsAssignment_1_1; }
		
		//Beat
		public RuleCall getOwnedBeatsBeatParserRuleCall_1_1_0() { return cOwnedBeatsBeatParserRuleCall_1_1_0; }
		
		//(ownedBars+=Bar ownedBars+=Bar*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ownedBars+=Bar
		public Assignment getOwnedBarsAssignment_2_0() { return cOwnedBarsAssignment_2_0; }
		
		//Bar
		public RuleCall getOwnedBarsBarParserRuleCall_2_0_0() { return cOwnedBarsBarParserRuleCall_2_0_0; }
		
		//ownedBars+=Bar*
		public Assignment getOwnedBarsAssignment_2_1() { return cOwnedBarsAssignment_2_1; }
		
		//Bar
		public RuleCall getOwnedBarsBarParserRuleCall_2_1_0() { return cOwnedBarsBarParserRuleCall_2_1_0; }
		
		//(ownedPatterns+=Pattern ownedPatterns+=Pattern*)? ownedSections+=Section ownedSections+=Section*
		public Group getGroup_3() { return cGroup_3; }
		
		//(ownedPatterns+=Pattern ownedPatterns+=Pattern*)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//ownedPatterns+=Pattern
		public Assignment getOwnedPatternsAssignment_3_0_0() { return cOwnedPatternsAssignment_3_0_0; }
		
		//Pattern
		public RuleCall getOwnedPatternsPatternParserRuleCall_3_0_0_0() { return cOwnedPatternsPatternParserRuleCall_3_0_0_0; }
		
		//ownedPatterns+=Pattern*
		public Assignment getOwnedPatternsAssignment_3_0_1() { return cOwnedPatternsAssignment_3_0_1; }
		
		//Pattern
		public RuleCall getOwnedPatternsPatternParserRuleCall_3_0_1_0() { return cOwnedPatternsPatternParserRuleCall_3_0_1_0; }
		
		//ownedSections+=Section
		public Assignment getOwnedSectionsAssignment_3_1() { return cOwnedSectionsAssignment_3_1; }
		
		//Section
		public RuleCall getOwnedSectionsSectionParserRuleCall_3_1_0() { return cOwnedSectionsSectionParserRuleCall_3_1_0; }
		
		//ownedSections+=Section*
		public Assignment getOwnedSectionsAssignment_3_2() { return cOwnedSectionsAssignment_3_2; }
		
		//Section
		public RuleCall getOwnedSectionsSectionParserRuleCall_3_2_0() { return cOwnedSectionsSectionParserRuleCall_3_2_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.rythmml.Ryml.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.rythmml.Ryml.Section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPatternsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPatternsPatternCrossReference_3_0 = (CrossReference)cPatternsAssignment_3.eContents().get(0);
		private final RuleCall cPatternsPatternEStringParserRuleCall_3_0_1 = (RuleCall)cPatternsPatternCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPatternsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cPatternsPatternCrossReference_4_1_0 = (CrossReference)cPatternsAssignment_4_1.eContents().get(0);
		private final RuleCall cPatternsPatternEStringParserRuleCall_4_1_0_1 = (RuleCall)cPatternsPatternCrossReference_4_1_0.eContents().get(1);
		
		//Section:
		//	'Section'
		//	name=EString
		//	':'
		//	patterns+=[Pattern|EString] ("|" patterns+=[Pattern|EString])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Section' name=EString ':' patterns+=[Pattern|EString] ("|" patterns+=[Pattern|EString])*
		public Group getGroup() { return cGroup; }
		
		//'Section'
		public Keyword getSectionKeyword_0() { return cSectionKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//patterns+=[Pattern|EString]
		public Assignment getPatternsAssignment_3() { return cPatternsAssignment_3; }
		
		//[Pattern|EString]
		public CrossReference getPatternsPatternCrossReference_3_0() { return cPatternsPatternCrossReference_3_0; }
		
		//EString
		public RuleCall getPatternsPatternEStringParserRuleCall_3_0_1() { return cPatternsPatternEStringParserRuleCall_3_0_1; }
		
		//("|" patterns+=[Pattern|EString])*
		public Group getGroup_4() { return cGroup_4; }
		
		//"|"
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }
		
		//patterns+=[Pattern|EString]
		public Assignment getPatternsAssignment_4_1() { return cPatternsAssignment_4_1; }
		
		//[Pattern|EString]
		public CrossReference getPatternsPatternCrossReference_4_1_0() { return cPatternsPatternCrossReference_4_1_0; }
		
		//EString
		public RuleCall getPatternsPatternEStringParserRuleCall_4_1_0_1() { return cPatternsPatternEStringParserRuleCall_4_1_0_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.rythmml.Ryml.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.rythmml.Ryml.Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBarsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cBarsBarCrossReference_3_0 = (CrossReference)cBarsAssignment_3.eContents().get(0);
		private final RuleCall cBarsBarEStringParserRuleCall_3_0_1 = (RuleCall)cBarsBarCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBarsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cBarsBarCrossReference_4_1_0 = (CrossReference)cBarsAssignment_4_1.eContents().get(0);
		private final RuleCall cBarsBarEStringParserRuleCall_4_1_0_1 = (RuleCall)cBarsBarCrossReference_4_1_0.eContents().get(1);
		
		//Pattern:
		//	'Pattern'
		//	name=EString
		//	':'
		//	bars+=[Bar|EString] ("|" bars+=[Bar|EString])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Pattern' name=EString ':' bars+=[Bar|EString] ("|" bars+=[Bar|EString])*
		public Group getGroup() { return cGroup; }
		
		//'Pattern'
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//bars+=[Bar|EString]
		public Assignment getBarsAssignment_3() { return cBarsAssignment_3; }
		
		//[Bar|EString]
		public CrossReference getBarsBarCrossReference_3_0() { return cBarsBarCrossReference_3_0; }
		
		//EString
		public RuleCall getBarsBarEStringParserRuleCall_3_0_1() { return cBarsBarEStringParserRuleCall_3_0_1; }
		
		//("|" bars+=[Bar|EString])*
		public Group getGroup_4() { return cGroup_4; }
		
		//"|"
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }
		
		//bars+=[Bar|EString]
		public Assignment getBarsAssignment_4_1() { return cBarsAssignment_4_1; }
		
		//[Bar|EString]
		public CrossReference getBarsBarCrossReference_4_1_0() { return cBarsBarCrossReference_4_1_0; }
		
		//EString
		public RuleCall getBarsBarEStringParserRuleCall_4_1_0_1() { return cBarsBarEStringParserRuleCall_4_1_0_1; }
	}
	public class BarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.rythmml.Ryml.Bar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBeatsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cBeatsBeatCrossReference_3_0 = (CrossReference)cBeatsAssignment_3.eContents().get(0);
		private final RuleCall cBeatsBeatEStringParserRuleCall_3_0_1 = (RuleCall)cBeatsBeatCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBeatsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cBeatsBeatCrossReference_4_1_0 = (CrossReference)cBeatsAssignment_4_1.eContents().get(0);
		private final RuleCall cBeatsBeatEStringParserRuleCall_4_1_0_1 = (RuleCall)cBeatsBeatCrossReference_4_1_0.eContents().get(1);
		
		//Bar:
		//	'Bar'
		//	name=EString
		//	':'
		//	beats+=[Beat|EString] ("|" beats+=[Beat|EString])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Bar' name=EString ':' beats+=[Beat|EString] ("|" beats+=[Beat|EString])*
		public Group getGroup() { return cGroup; }
		
		//'Bar'
		public Keyword getBarKeyword_0() { return cBarKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//beats+=[Beat|EString]
		public Assignment getBeatsAssignment_3() { return cBeatsAssignment_3; }
		
		//[Beat|EString]
		public CrossReference getBeatsBeatCrossReference_3_0() { return cBeatsBeatCrossReference_3_0; }
		
		//EString
		public RuleCall getBeatsBeatEStringParserRuleCall_3_0_1() { return cBeatsBeatEStringParserRuleCall_3_0_1; }
		
		//("|" beats+=[Beat|EString])*
		public Group getGroup_4() { return cGroup_4; }
		
		//"|"
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }
		
		//beats+=[Beat|EString]
		public Assignment getBeatsAssignment_4_1() { return cBeatsAssignment_4_1; }
		
		//[Beat|EString]
		public CrossReference getBeatsBeatCrossReference_4_1_0() { return cBeatsBeatCrossReference_4_1_0; }
		
		//EString
		public RuleCall getBeatsBeatEStringParserRuleCall_4_1_0_1() { return cBeatsBeatEStringParserRuleCall_4_1_0_1; }
	}
	public class BeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.rythmml.Ryml.Beat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNbOfTicksKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTotalDivNumberAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTotalDivNumberEIntParserRuleCall_3_1_0 = (RuleCall)cTotalDivNumberAssignment_3_1.eContents().get(0);
		private final Keyword cNotesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNotesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cNotesNoteCrossReference_5_0 = (CrossReference)cNotesAssignment_5.eContents().get(0);
		private final RuleCall cNotesNoteEStringParserRuleCall_5_0_1 = (RuleCall)cNotesNoteCrossReference_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNotePositionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNotePositionsEIntParserRuleCall_7_0 = (RuleCall)cNotePositionsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cVerticalLineKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cNotesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cNotesNoteCrossReference_8_1_0 = (CrossReference)cNotesAssignment_8_1.eContents().get(0);
		private final RuleCall cNotesNoteEStringParserRuleCall_8_1_0_1 = (RuleCall)cNotesNoteCrossReference_8_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cNotePositionsAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cNotePositionsEIntParserRuleCall_8_3_0 = (RuleCall)cNotePositionsAssignment_8_3.eContents().get(0);
		
		//Beat:
		//	'Beat'
		//	name=EString
		//	':' ('Nb of ticks : ' totalDivNumber=EInt)?
		//	'Notes :' notes+=[Note|EString] ',' notePositions+=EInt ("|" notes+=[Note|EString] ',' notePositions+=EInt)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Beat' name=EString ':' ('Nb of ticks : ' totalDivNumber=EInt)? 'Notes :' notes+=[Note|EString] ',' notePositions+=EInt
		//("|" notes+=[Note|EString] ',' notePositions+=EInt)*
		public Group getGroup() { return cGroup; }
		
		//'Beat'
		public Keyword getBeatKeyword_0() { return cBeatKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//('Nb of ticks : ' totalDivNumber=EInt)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'Nb of ticks : '
		public Keyword getNbOfTicksKeyword_3_0() { return cNbOfTicksKeyword_3_0; }
		
		//totalDivNumber=EInt
		public Assignment getTotalDivNumberAssignment_3_1() { return cTotalDivNumberAssignment_3_1; }
		
		//EInt
		public RuleCall getTotalDivNumberEIntParserRuleCall_3_1_0() { return cTotalDivNumberEIntParserRuleCall_3_1_0; }
		
		//'Notes :'
		public Keyword getNotesKeyword_4() { return cNotesKeyword_4; }
		
		//notes+=[Note|EString]
		public Assignment getNotesAssignment_5() { return cNotesAssignment_5; }
		
		//[Note|EString]
		public CrossReference getNotesNoteCrossReference_5_0() { return cNotesNoteCrossReference_5_0; }
		
		//EString
		public RuleCall getNotesNoteEStringParserRuleCall_5_0_1() { return cNotesNoteEStringParserRuleCall_5_0_1; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//notePositions+=EInt
		public Assignment getNotePositionsAssignment_7() { return cNotePositionsAssignment_7; }
		
		//EInt
		public RuleCall getNotePositionsEIntParserRuleCall_7_0() { return cNotePositionsEIntParserRuleCall_7_0; }
		
		//("|" notes+=[Note|EString] ',' notePositions+=EInt)*
		public Group getGroup_8() { return cGroup_8; }
		
		//"|"
		public Keyword getVerticalLineKeyword_8_0() { return cVerticalLineKeyword_8_0; }
		
		//notes+=[Note|EString]
		public Assignment getNotesAssignment_8_1() { return cNotesAssignment_8_1; }
		
		//[Note|EString]
		public CrossReference getNotesNoteCrossReference_8_1_0() { return cNotesNoteCrossReference_8_1_0; }
		
		//EString
		public RuleCall getNotesNoteEStringParserRuleCall_8_1_0_1() { return cNotesNoteEStringParserRuleCall_8_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_8_2() { return cCommaKeyword_8_2; }
		
		//notePositions+=EInt
		public Assignment getNotePositionsAssignment_8_3() { return cNotePositionsAssignment_8_3; }
		
		//EInt
		public RuleCall getNotePositionsEIntParserRuleCall_8_3_0() { return cNotePositionsEIntParserRuleCall_8_3_0; }
	}
	public class NoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.rythmml.Ryml.Note");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueDrumNoteValueEnumRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Note:
		//	'Note'
		//	name=EString
		//	':'
		//	value=DrumNoteValue?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Note' name=EString ':' value=DrumNoteValue?
		public Group getGroup() { return cGroup; }
		
		//'Note'
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//value=DrumNoteValue?
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//DrumNoteValue
		public RuleCall getValueDrumNoteValueEnumRuleCall_3_0() { return cValueDrumNoteValueEnumRuleCall_3_0; }
	}
	
	public class DrumNoteValueElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.rythmml.Ryml.DrumNoteValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSDSDKeyword_0_0 = (Keyword)cSDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBDBDKeyword_1_0 = (Keyword)cBDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCHCHKeyword_2_0 = (Keyword)cCHEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOHEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOHOHKeyword_3_0 = (Keyword)cOHEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCCEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCCCCKeyword_4_0 = (Keyword)cCCEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cRCEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cRCRCKeyword_5_0 = (Keyword)cRCEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTMEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTMTMKeyword_6_0 = (Keyword)cTMEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cTOEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cTOTOKeyword_7_0 = (Keyword)cTOEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSSKeyword_8_0 = (Keyword)cSEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cWSEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cWSWSKeyword_9_0 = (Keyword)cWSEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cLEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cLLKeyword_10_0 = (Keyword)cLEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum DrumNoteValue:
		//	SD | BD | CH | OH | CC | RC | TM | TO | S | WS | L;
		public EnumRule getRule() { return rule; }
		
		//SD | BD | CH | OH | CC | RC | TM | TO | S | WS | L
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SD
		public EnumLiteralDeclaration getSDEnumLiteralDeclaration_0() { return cSDEnumLiteralDeclaration_0; }
		
		//'SD'
		public Keyword getSDSDKeyword_0_0() { return cSDSDKeyword_0_0; }
		
		//BD
		public EnumLiteralDeclaration getBDEnumLiteralDeclaration_1() { return cBDEnumLiteralDeclaration_1; }
		
		//'BD'
		public Keyword getBDBDKeyword_1_0() { return cBDBDKeyword_1_0; }
		
		//CH
		public EnumLiteralDeclaration getCHEnumLiteralDeclaration_2() { return cCHEnumLiteralDeclaration_2; }
		
		//'CH'
		public Keyword getCHCHKeyword_2_0() { return cCHCHKeyword_2_0; }
		
		//OH
		public EnumLiteralDeclaration getOHEnumLiteralDeclaration_3() { return cOHEnumLiteralDeclaration_3; }
		
		//'OH'
		public Keyword getOHOHKeyword_3_0() { return cOHOHKeyword_3_0; }
		
		//CC
		public EnumLiteralDeclaration getCCEnumLiteralDeclaration_4() { return cCCEnumLiteralDeclaration_4; }
		
		//'CC'
		public Keyword getCCCCKeyword_4_0() { return cCCCCKeyword_4_0; }
		
		//RC
		public EnumLiteralDeclaration getRCEnumLiteralDeclaration_5() { return cRCEnumLiteralDeclaration_5; }
		
		//'RC'
		public Keyword getRCRCKeyword_5_0() { return cRCRCKeyword_5_0; }
		
		//TM
		public EnumLiteralDeclaration getTMEnumLiteralDeclaration_6() { return cTMEnumLiteralDeclaration_6; }
		
		//'TM'
		public Keyword getTMTMKeyword_6_0() { return cTMTMKeyword_6_0; }
		
		//TO
		public EnumLiteralDeclaration getTOEnumLiteralDeclaration_7() { return cTOEnumLiteralDeclaration_7; }
		
		//'TO'
		public Keyword getTOTOKeyword_7_0() { return cTOTOKeyword_7_0; }
		
		//S
		public EnumLiteralDeclaration getSEnumLiteralDeclaration_8() { return cSEnumLiteralDeclaration_8; }
		
		//'S'
		public Keyword getSSKeyword_8_0() { return cSSKeyword_8_0; }
		
		//WS
		public EnumLiteralDeclaration getWSEnumLiteralDeclaration_9() { return cWSEnumLiteralDeclaration_9; }
		
		//'WS'
		public Keyword getWSWSKeyword_9_0() { return cWSWSKeyword_9_0; }
		
		//L
		public EnumLiteralDeclaration getLEnumLiteralDeclaration_10() { return cLEnumLiteralDeclaration_10; }
		
		//'L'
		public Keyword getLLKeyword_10_0() { return cLLKeyword_10_0; }
	}
	
	private final MusicElements pMusic;
	private final EStringElements pEString;
	private final SectionElements pSection;
	private final EIntElements pEInt;
	private final PatternElements pPattern;
	private final BarElements pBar;
	private final BeatElements pBeat;
	private final NoteElements pNote;
	private final DrumNoteValueElements eDrumNoteValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RymlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMusic = new MusicElements();
		this.pEString = new EStringElements();
		this.pSection = new SectionElements();
		this.pEInt = new EIntElements();
		this.pPattern = new PatternElements();
		this.pBar = new BarElements();
		this.pBeat = new BeatElements();
		this.pNote = new NoteElements();
		this.eDrumNoteValue = new DrumNoteValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.unice.polytech.dsl.rythmml.Ryml".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Music:
	//	'Music'
	//	name=EString
	//	':' ('title :' title=EString)? ('author :' author=EString)? ('bpm :' bpm=EInt)? ('resolution per beats : '
	//	resolutionPerSlide=EInt)? (ownedNotes+=Note ownedNotes+=Note*)?
	//	& (ownedBeats+=Beat ownedBeats+=Beat*)?
	//	& (ownedBars+=Bar ownedBars+=Bar*)?
	//	& (ownedPatterns+=Pattern ownedPatterns+=Pattern*)?
	//	ownedSections+=Section ownedSections+=Section*;
	public MusicElements getMusicAccess() {
		return pMusic;
	}
	
	public ParserRule getMusicRule() {
		return getMusicAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Section:
	//	'Section'
	//	name=EString
	//	':'
	//	patterns+=[Pattern|EString] ("|" patterns+=[Pattern|EString])*;
	public SectionElements getSectionAccess() {
		return pSection;
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Pattern:
	//	'Pattern'
	//	name=EString
	//	':'
	//	bars+=[Bar|EString] ("|" bars+=[Bar|EString])*;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//Bar:
	//	'Bar'
	//	name=EString
	//	':'
	//	beats+=[Beat|EString] ("|" beats+=[Beat|EString])*;
	public BarElements getBarAccess() {
		return pBar;
	}
	
	public ParserRule getBarRule() {
		return getBarAccess().getRule();
	}
	
	//Beat:
	//	'Beat'
	//	name=EString
	//	':' ('Nb of ticks : ' totalDivNumber=EInt)?
	//	'Notes :' notes+=[Note|EString] ',' notePositions+=EInt ("|" notes+=[Note|EString] ',' notePositions+=EInt)*;
	public BeatElements getBeatAccess() {
		return pBeat;
	}
	
	public ParserRule getBeatRule() {
		return getBeatAccess().getRule();
	}
	
	//Note:
	//	'Note'
	//	name=EString
	//	':'
	//	value=DrumNoteValue?;
	public NoteElements getNoteAccess() {
		return pNote;
	}
	
	public ParserRule getNoteRule() {
		return getNoteAccess().getRule();
	}
	
	//enum DrumNoteValue:
	//	SD | BD | CH | OH | CC | RC | TM | TO | S | WS | L;
	public DrumNoteValueElements getDrumNoteValueAccess() {
		return eDrumNoteValue;
	}
	
	public EnumRule getDrumNoteValueRule() {
		return getDrumNoteValueAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
