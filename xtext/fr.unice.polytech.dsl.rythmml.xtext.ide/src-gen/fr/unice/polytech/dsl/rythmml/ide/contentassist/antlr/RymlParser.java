/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.dsl.rythmml.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.unice.polytech.dsl.rythmml.ide.contentassist.antlr.internal.InternalRymlParser;
import fr.unice.polytech.dsl.rythmml.services.RymlGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RymlParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RymlGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RymlGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getBarAccess().getAlternatives(), "rule__Bar__Alternatives");
			builder.put(grammarAccess.getDrumNoteValueAccess().getAlternatives(), "rule__DrumNoteValue__Alternatives");
			builder.put(grammarAccess.getMusicAccess().getGroup_0(), "rule__Music__Group_0__0");
			builder.put(grammarAccess.getMusicAccess().getGroup_0_3(), "rule__Music__Group_0_3__0");
			builder.put(grammarAccess.getMusicAccess().getGroup_0_4(), "rule__Music__Group_0_4__0");
			builder.put(grammarAccess.getMusicAccess().getGroup_0_5(), "rule__Music__Group_0_5__0");
			builder.put(grammarAccess.getMusicAccess().getGroup_0_6(), "rule__Music__Group_0_6__0");
			builder.put(grammarAccess.getMusicAccess().getGroup_0_7(), "rule__Music__Group_0_7__0");
			builder.put(grammarAccess.getMusicAccess().getGroup_1(), "rule__Music__Group_1__0");
			builder.put(grammarAccess.getMusicAccess().getGroup_2(), "rule__Music__Group_2__0");
			builder.put(grammarAccess.getMusicAccess().getGroup_3(), "rule__Music__Group_3__0");
			builder.put(grammarAccess.getMusicAccess().getGroup_4(), "rule__Music__Group_4__0");
			builder.put(grammarAccess.getSectionAccess().getGroup(), "rule__Section__Group__0");
			builder.put(grammarAccess.getSectionAccess().getGroup_4(), "rule__Section__Group_4__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getPatternAccess().getGroup(), "rule__Pattern__Group__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_4(), "rule__Pattern__Group_4__0");
			builder.put(grammarAccess.getBarMultiplierAccess().getGroup(), "rule__BarMultiplier__Group__0");
			builder.put(grammarAccess.getBarMultiplierAccess().getGroup_1(), "rule__BarMultiplier__Group_1__0");
			builder.put(grammarAccess.getClassicalBarAccess().getGroup(), "rule__ClassicalBar__Group__0");
			builder.put(grammarAccess.getClassicalBarAccess().getGroup_4(), "rule__ClassicalBar__Group_4__0");
			builder.put(grammarAccess.getModifiedBarAccess().getGroup(), "rule__ModifiedBar__Group__0");
			builder.put(grammarAccess.getBeatAccess().getGroup(), "rule__Beat__Group__0");
			builder.put(grammarAccess.getBeatAccess().getGroup_3(), "rule__Beat__Group_3__0");
			builder.put(grammarAccess.getBeatAccess().getGroup_8(), "rule__Beat__Group_8__0");
			builder.put(grammarAccess.getNoteAccess().getGroup(), "rule__Note__Group__0");
			builder.put(grammarAccess.getMusicAccess().getNameAssignment_0_1(), "rule__Music__NameAssignment_0_1");
			builder.put(grammarAccess.getMusicAccess().getTitleAssignment_0_3_1(), "rule__Music__TitleAssignment_0_3_1");
			builder.put(grammarAccess.getMusicAccess().getAuthorAssignment_0_4_1(), "rule__Music__AuthorAssignment_0_4_1");
			builder.put(grammarAccess.getMusicAccess().getBpmAssignment_0_5_1(), "rule__Music__BpmAssignment_0_5_1");
			builder.put(grammarAccess.getMusicAccess().getResolutionPerSlideAssignment_0_6_1(), "rule__Music__ResolutionPerSlideAssignment_0_6_1");
			builder.put(grammarAccess.getMusicAccess().getOwnedNotesAssignment_0_7_0(), "rule__Music__OwnedNotesAssignment_0_7_0");
			builder.put(grammarAccess.getMusicAccess().getOwnedNotesAssignment_0_7_1(), "rule__Music__OwnedNotesAssignment_0_7_1");
			builder.put(grammarAccess.getMusicAccess().getOwnedBeatsAssignment_1_0(), "rule__Music__OwnedBeatsAssignment_1_0");
			builder.put(grammarAccess.getMusicAccess().getOwnedBeatsAssignment_1_1(), "rule__Music__OwnedBeatsAssignment_1_1");
			builder.put(grammarAccess.getMusicAccess().getOwnedBarsAssignment_2_0(), "rule__Music__OwnedBarsAssignment_2_0");
			builder.put(grammarAccess.getMusicAccess().getOwnedBarsAssignment_2_1(), "rule__Music__OwnedBarsAssignment_2_1");
			builder.put(grammarAccess.getMusicAccess().getOwnedPatternsAssignment_3_0(), "rule__Music__OwnedPatternsAssignment_3_0");
			builder.put(grammarAccess.getMusicAccess().getOwnedPatternsAssignment_3_1(), "rule__Music__OwnedPatternsAssignment_3_1");
			builder.put(grammarAccess.getMusicAccess().getOwnedSectionsAssignment_4_0(), "rule__Music__OwnedSectionsAssignment_4_0");
			builder.put(grammarAccess.getMusicAccess().getOwnedSectionsAssignment_4_1(), "rule__Music__OwnedSectionsAssignment_4_1");
			builder.put(grammarAccess.getSectionAccess().getNameAssignment_1(), "rule__Section__NameAssignment_1");
			builder.put(grammarAccess.getSectionAccess().getPatternsAssignment_3(), "rule__Section__PatternsAssignment_3");
			builder.put(grammarAccess.getSectionAccess().getPatternsAssignment_4_1(), "rule__Section__PatternsAssignment_4_1");
			builder.put(grammarAccess.getPatternAccess().getNameAssignment_1(), "rule__Pattern__NameAssignment_1");
			builder.put(grammarAccess.getPatternAccess().getBarsAssignment_3(), "rule__Pattern__BarsAssignment_3");
			builder.put(grammarAccess.getPatternAccess().getBarsAssignment_4_1(), "rule__Pattern__BarsAssignment_4_1");
			builder.put(grammarAccess.getBarMultiplierAccess().getBarAssignment_0(), "rule__BarMultiplier__BarAssignment_0");
			builder.put(grammarAccess.getBarMultiplierAccess().getMultiplierAssignment_1_1(), "rule__BarMultiplier__MultiplierAssignment_1_1");
			builder.put(grammarAccess.getClassicalBarAccess().getNameAssignment_1(), "rule__ClassicalBar__NameAssignment_1");
			builder.put(grammarAccess.getClassicalBarAccess().getBeatsAssignment_3(), "rule__ClassicalBar__BeatsAssignment_3");
			builder.put(grammarAccess.getClassicalBarAccess().getBeatsAssignment_4_1(), "rule__ClassicalBar__BeatsAssignment_4_1");
			builder.put(grammarAccess.getModifiedBarAccess().getNameAssignment_1(), "rule__ModifiedBar__NameAssignment_1");
			builder.put(grammarAccess.getModifiedBarAccess().getBarAssignment_3(), "rule__ModifiedBar__BarAssignment_3");
			builder.put(grammarAccess.getBeatAccess().getNameAssignment_1(), "rule__Beat__NameAssignment_1");
			builder.put(grammarAccess.getBeatAccess().getTotalDivNumberAssignment_3_1(), "rule__Beat__TotalDivNumberAssignment_3_1");
			builder.put(grammarAccess.getBeatAccess().getNotesAssignment_5(), "rule__Beat__NotesAssignment_5");
			builder.put(grammarAccess.getBeatAccess().getNotePositionsAssignment_7(), "rule__Beat__NotePositionsAssignment_7");
			builder.put(grammarAccess.getBeatAccess().getNotesAssignment_8_1(), "rule__Beat__NotesAssignment_8_1");
			builder.put(grammarAccess.getBeatAccess().getNotePositionsAssignment_8_3(), "rule__Beat__NotePositionsAssignment_8_3");
			builder.put(grammarAccess.getNoteAccess().getNameAssignment_1(), "rule__Note__NameAssignment_1");
			builder.put(grammarAccess.getNoteAccess().getValueAssignment_3(), "rule__Note__ValueAssignment_3");
			builder.put(grammarAccess.getMusicAccess().getUnorderedGroup(), "rule__Music__UnorderedGroup");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RymlGrammarAccess grammarAccess;

	@Override
	protected InternalRymlParser createParser() {
		InternalRymlParser result = new InternalRymlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RymlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RymlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
